#!/usr/bin/env bash
###########
# mongodb COMMAND
#
# @author   RuneImp <runeimp@gmail.com>
# @version  0.2.1
# @license  http://opensource.org/licenses/MIT
#
###
# show_usage:
# ------
# $ mongodb start
# $ mongodb stop
# 
###
# Installation
# ------------
# 1. mongodb must be in your path and executable.
# 
###
# Error Codes:
# ------------
#  1 = WFT?
#
###
# ChangeLog:
# ----------
# 2015-04-30	v0.2.1	Fixed JSON output for 'info build' and status.
# 2015-04-29	v0.2.0	Added the 'info build', 'info storage', status, and version commands.
#						Added OS detection
# 2015-04-28	v0.1.1	Updated installation comments
# 2015-04-24	v0.1.0	Initial script creation
# 
###
# ToDo:
# -----
# [ ] ____
#

OS_BSD="BSD" # BSD based UNIX: BSDi, FreeBSD, NetBSD, OpenBSD, etc.
OS_CYGWIN="Cygwin" # POSIX environment for Windows
OS_LINUX="Linux"
OS_INTERIX="Interix" # Windows Services for UNIX
OS_MINGW="MinGW"
OS_MSYS="MSys" # Part of MinGW (Minimal GNU for Windows)
OS_NONSTOP="NonStop"
OS_OSX="OS X"
OS_SOLARIS="Solaris"
OS_SUNOS="SunOS"
OS_UWIN="UWIN" # AT&T Unix subsystem for Windows
OS_WIN32="Windows 32-bit" # Win95, Win98, WinME, etc.
OS_WINNT="Windows NT" # WinNT, Win2K, WinXP, WinVista, Win7+

uname="$(uname -s)"

case "$uname" in
	*BSD)		OS="$OS_BSD" ;;
	*BSDi)		OS="$OS_BSD" ;;
	"BSD/OS")	OS="$OS_BSD" ;;
	CYGWIN*)	OS="$OS_CYGWIN" ;;
	Darwin)		OS="$OS_OSX" ;;
	GNU)		OS="$OS_LINUX" ;;
	MINGW*)		OS="$OS_MINGW" ;;
	NONSTOP*)	OS="$OS_NONSTOP" ;;
	Solaris*)	OS="$OS_SOLARIS" ;;
	UWIN*)		OS="$OS_UWIN" ;;
	win32)		OS="$OS_WIN32" ;;
	win64)		OS="$OS_WIN64" ;; # I'm guessing on this one. ~RuneImp
	*)			OS="$system" ;;
esac

# echo "\$uname: $uname"
# echo "\$OS: $OS"
# exit 0

db_path="/usr/local/var/mongodb/wiredTiger"
db_store="wiredTiger" # wiredTiger or mmapv1
log_path="/usr/local/var/log/mongodb/output.log"

if [ $# -eq 0 ]; then
	echo
	echo "Yes?"
	echo
	echo "Try adding a command such as: start, stop, info, etc."
	echo
else
	if [ $1 == 'start' ]; then
		echo "Starting MongoDB"
		if [[ $2 == 'interactive' ]]; then
			mongod --dbpath "$db_path" --storageEngine "$db_store" --wiredTigerCacheSizeGB 1 --logpath "$log_path" --httpinterface --noauth --rest
		else
			mongod --dbpath "$db_path" --storageEngine "$db_store" --wiredTigerCacheSizeGB 1 --logpath "$log_path" --httpinterface --noauth --rest --fork
		fi
		# --wiredTigerDirectoryForIndexes false
		# --wiredTigerCacheSizeGB `half of RAM`
		# --wiredTigerCollectionBlockCompressor snappy zlib none
		# --wiredTigerIndexPrefixCompression true
		# --directoryperdb
		# --journal (on by default on 2.6+)
		# --httpinterface
		# --fork
		# --noauth
		# --rest
		# --sysinfo
	elif [ $1 == 'stop' ]; then
		echo "Stoping MongoDB"
		if [[ $OS == "$OS_LINUX" ]]; then
			mongod --shutdown
			# mongod --shutdown --dbpath "$db_path"
		else
			mongo admin --quiet --eval "db.shutdownServer();"
		fi
	elif [ $1 == 'info' ]; then
		if [[ $2 == 'build' ]]; then
			mongo --quiet --eval 'JSON.stringify( db.runCommand("buildInfo"), null, 4 )'
		elif [[ $2 == 'storage' ]]; then
			mongo --quiet --eval "db.serverStatus().storageEngine.name"
		else
			mongod --sysinfo
		fi
	elif [ $1 == 'status' ]; then
		mongo --quiet --eval "JSON.stringify( db.serverStatus(), null, 4 )"
	elif [ $1 == 'version' ]; then
		mongod --version
	else
		echo "WTF? What is the '${1}' command supposed to do?"
		exit 1
	fi
fi

exit 0
