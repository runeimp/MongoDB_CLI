#!/usr/bin/env bash
###########
# mongodb COMMAND
#
# @author   RuneImp <runeimp@gmail.com>
# @version  0.4.0
# @license  http://opensource.org/licenses/MIT
#
###
# show_usage:
# ------
# $ mongodb start
# $ mongodb stop
# $ mongodb help
# 
###
# Installation
# ------------
# 1. mongodb must be in your path and executable.
# 
###
# Error Codes:
# ------------
#  1 = WFT?
#
###
# ChangeLog:
# ----------
# 2015-05-08	v0.4.0	Added support for native MongoDB config with auto find.
# 2015-05-08	v0.3.3	Updated help.
# 2015-05-07	v0.3.2	Made help useful, and defaulted 'info' to 'info build'.
# 2015-05-04	v0.3.1	Added test for user config and sets defaults if not present. Also added version number for this script.
# 2015-04-30	v0.3.0	Setup config system
# 2015-04-30	v0.2.1	Fixed JSON output for 'info build' and status.
# 2015-04-29	v0.2.0	Added the 'info build', 'info storage', status, and version commands.
#						Added OS detection
# 2015-04-28	v0.1.1	Updated installation comments
# 2015-04-24	v0.1.0	Initial script creation
# 
###
# ToDo:
# -----
# [ ] ____
#

uname=`uname`
OS=`ostype`
OS_LINUX='Linux'
USER_CONFIG="$HOME/.config/mongodb.cfg"
MONGO_CONFIG=''
VERSION_NUMBER='0.4.0'
VERSION_LABEL="MongoDB CLI v$VERSION_NUMBER"

if [ -e "$USER_CONFIG" ]; then
	source "$USER_CONFIG"
else
	# echo "DEBUG:   User config not found. Using defaults."
	db_path="/usr/local/var/mongodb/wiredTiger"
	db_store="wiredTiger" # wiredTiger or mmapv1
	log_path="/usr/local/var/log/mongodb/output.log"
fi

if [[ -e "$HOME/mongodb.conf" ]]; then
	MONGO_CONFIG="$HOME/mongodb.conf"
elif [[ -e '/usr/local/etc/mongodb.conf' ]]; then
	MONGO_CONFIG='/etc/mongodb.conf'
elif [[ -e '/usr/local/etc/mongodb.conf' ]]; then
	MONGO_CONFIG='/etc/mongodb.conf'
fi

# echo "\$OS: $OS ($uname)"
# echo "\$db_path: $db_path"
# echo "\$db_store: $db_store"
# echo "\$log_path: $log_path"
# echo "\$MONGO_CONFIG: '$MONGO_CONFIG'"
# exit 0

if [ $# -eq 0 ]; then
	echo
	echo "Yes?"
	echo
	echo "Try adding a command such as: start, stop, info, or help?"
	echo
else
	if [ $1 == 'start' ]; then
		if [[ $2 == 'interactive' ]]; then
			echo "Starting MongoDB (interactive)"
			mongod --dbpath "$db_path" --storageEngine "$db_store" --wiredTigerCacheSizeGB 1 --logpath "$log_path" --httpinterface --noauth --rest
		elif [[ ! -z $2 ]]; then
			echo "Starting MongoDB with $2"
			mongod --config "$2"
		elif [[ ! -z "$MONGO_CONFIG" ]]; then
			echo "Starting MongoDB with $MONGO_CONFIG"
			mongod --config "$MONGO_CONFIG"
		else
			echo "Starting MongoDB"
			mongod --dbpath "$db_path" --storageEngine "$db_store" --wiredTigerCacheSizeGB 1 --logpath "$log_path" --httpinterface --noauth --rest --fork
		fi
		# --wiredTigerDirectoryForIndexes false
		# --wiredTigerCacheSizeGB `half of RAM`
		# --wiredTigerCollectionBlockCompressor snappy zlib none
		# --wiredTigerIndexPrefixCompression true
		# --directoryperdb
		# --journal (on by default on 2.6+)
		# --httpinterface
		# --fork
		# --noauth
		# --rest
		# --sysinfo
	elif [ $1 == 'stop' ]; then
		echo "Stoping MongoDB"
		if [[ $OS == "$OS_LINUX" ]]; then
			mongod --shutdown
			# mongod --shutdown --dbpath "$db_path"
		else
			mongo admin --quiet --eval "db.shutdownServer();"
		fi
	elif [ $1 == 'help' ]; then
		echo "$VERSION_LABEL"
		echo
		echo 'mongodb COMMAND [SUBCOMMAND]'
		echo
		echo '  Commands:'
		echo '    help      Display this help info'
		echo '    start     Start mongod. Will use a config file if it finds one.'
		echo '    stop      Stop mongod'
		echo '    info      Run db.runCommand("buildInfo")'
		echo '    status    Run db.serverStatus()'
		echo '    storage   Retrieve the storage engine used'
		echo '    version   Retrieve the version of mongod that is active'
		echo
		echo '  Subcommands:'
		echo '    info build            Explicitly specify to show build info'
		echo '    start interactive     Launch mongod in interactive mode'
		echo '    start CONFIG_PATH     Launch mongod with a specific config file'
		echo
		echo '  Examples:'
		echo '    mongodb start /path/to/mongodb.conf'
		echo '    mongodb info build'
		echo
	elif [[ $1 == '--version' || $2 == '--version' ]]; then
		echo "$VERSION_LABEL"
	elif [ $1 == 'info' ]; then
		if [[ $2 == 'build' ]]; then
			mongo --quiet --eval 'JSON.stringify( db.runCommand("buildInfo"), null, 4 )'
		else
			mongo --quiet --eval 'JSON.stringify( db.runCommand("buildInfo"), null, 4 )'
		fi
	elif [ $1 == 'status' ]; then
		mongo --quiet --eval "JSON.stringify( db.serverStatus(), null, 4 )"
	elif [[ $2 == 'storage' ]]; then
		mongo --quiet --eval "db.serverStatus().storageEngine.name"
	elif [ $1 == 'version' ]; then
		mongod --version
	else
		echo "WTF? What is the '${1}' command supposed to do?"
		exit 1
	fi
fi

exit 0
